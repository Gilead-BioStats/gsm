meta:
  File: reporting.yaml
  description: Generate reporting data model including site-, country- and study-level metadata (dfGroups), metric metadata (dfMetrics) and results data with added study-level columsn (dfSummary and dfBounds).
spec:
  Raw_ctms_site:
    pi_number:
      required: true
    site_status:
      required: true
    pi_first_name:
      required: true
    pi_last_name:
      required: true
    city:
      required: true
    state:
      required: true
    country:
      required: true
  Raw_ctms_study:
    protocol_number:
      required: true
    status:
      required: true
  Mapped_ENROLL:
    invid:
      required: true
    subjid:
      required: true
    studyid:
      required: true
    country:
      required: true
  Analysis_Summary:
    _all:
      required: true
steps:
  # Get CTMS data
  - name: RunQuery # Need to add additional renames
    output: Temp_CTMSSiteWide
    params:
      df: Raw_ctms_site
      strQuery: "SELECT pi_number as GroupID, site_status as Status, pi_first_name as InvestigatorFirstName, pi_last_name as InvestigatorLastName, city as City, state as State, country as Country, * FROM df"
  - name: MakeLongMeta
    output: Temp_CTMSSite
    params:
      data: Temp_CTMSSiteWide
      strGroupLevel: 'Site'
  - name: RunQuery
    output: Temp_CTMSStudyWide
    params:
      df: Raw_ctms_study
      strQuery: "SELECT protocol_number as GroupID, status as Status, * FROM df"
  - name: MakeLongMeta
    output: Temp_CTMSStudy
    params:
      data: Temp_CTMSStudyWide
      strGroupLevel: "Study"

  # Get Participant and Site counts for Country, Site and Study
  # TODO: Think about using Mapped_Enrolled instead of Raw_ENROLL
  - name: RunQuery
    output: Temp_SiteCountsWide
    params:
      df: Mapped_ENROLL
      strQuery: "SELECT invid as GroupID, COUNT(DISTINCT subjid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df GROUP BY invid"
  - name: MakeLongMeta
    output: Temp_SiteCounts
    params:
      data: Temp_SiteCountsWide
      strGroupLevel: "Site"
  - name: RunQuery
    output: Temp_StudyCountsWide
    params:
      df: Mapped_ENROLL
      strQuery: "SELECT studyid as GroupID, COUNT(DISTINCT subjid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df GROUP BY studyid"
  - name: MakeLongMeta
    output: Temp_StudyCounts
    params:
      data: Temp_StudyCountsWide
      strGroupLevel: "Study"
  - name: RunQuery
    output: Temp_CountryCountsWide
    params:
      df: Mapped_ENROLL
      strQuery: "SELECT country as GroupID, COUNT(DISTINCT subjid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df GROUP BY country"
  - name: MakeLongMeta
    output: Temp_CountryCounts
    params:
      data: Temp_CountryCountsWide
      strGroupLevel: "Country"

  # Combine CTMS and Counts data as dfGroups
  - name: bind_rows
    output: Reporting_Groups
    params:
      SiteCounts: Temp_SiteCounts
      StudyCounts: Temp_StudyCounts
      CountryCounts: Temp_CountryCounts
      Site: Temp_CTMSSite
      Study: Temp_CTMSStudy

# Create Metric Medatadata
  - name: MakeMetric
    output: Reporting_Metrics
    params:
      lWorkflows: lWorkflows

# Stack dfSummary data into dfResults
  - name: BindResults
    output: Reporting_Results
    params:
      lAnalysis: lAnalysis
      strName: "Analysis_Summary"
      dSnapshotDate: dSnapshotDate
      strStudyID: strStudyID

# Calculate Bounds for confidence intervals
  - name: MakeBounds
    output: Reporting_Bounds
    params:
      dfResults: Reporting_Results
      dfMetrics: Reporting_Metrics

