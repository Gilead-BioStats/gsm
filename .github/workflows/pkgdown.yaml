on:
  push:
    branches: [main]
  workflow_dispatch:

name: pkgdown

jobs:
  pkgdown:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: webfactory/ssh-agent@v0.6.0
        with:
          ssh-private-key: ${{ secrets.LOAD_CLINDATA }}

      - name: Actions setup
        uses: actions/checkout@v2
        with:
          ref: main

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-tinytex@v2

      - name: install packages and generate sample reports
        shell: Rscript {0}
        run: |
          install.packages("devtools")
          install.packages("tidyverse")
          devtools::install(dependencies=TRUE)
          devtools::install_github('Gilead-BioStats/clindata')

          wf_mapping <- MakeWorkflowList(strNames="mapping")[[1]]
          wf_metrics <- MakeWorkflowList(strNames=paste0("kri",sprintf("%04d", 1:12)))
          dfMetrics <- wf_metrics %>% map_df(~.x$meta)

          # Import Site+Study Metadata
          dfStudy<-clindata::ctms_study %>% rename(StudyID = protocol_number)
          dfSite<- clindata::ctms_site %>% rename(SiteID = site_num)

          # Pull Raw Data - this will overwrite the previous data pull
          lRaw <- gsm::UseClindata(
            list(
              "dfSUBJ" = "clindata::rawplus_dm",
              "dfAE" = "clindata::rawplus_ae",
              "dfPD" = "clindata::ctms_protdev",
              "dfLB" = "clindata::rawplus_lb",
              "dfSTUDCOMP" = "clindata::rawplus_studcomp",
              "dfSDRGCOMP" = "clindata::rawplus_sdrgcomp",
              "dfDATACHG" = "clindata::edc_data_points",
              "dfDATAENT" = "clindata::edc_data_pages",
              "dfQUERY" = "clindata::edc_queries",
              "dfENROLL" = "clindata::rawplus_enroll"
            )
          )

          # Create Mapped Data
          lMapped <- RunWorkflow(lWorkflow = wf_mapping, lData = lRaw)$lData

          # Run Metrics
          lResults <-wf_metrics %>% map(~RunWorkflow(lWorkflow=.x, lData=lMapped))

          dfBounds <- lResults %>%
            imap_dfr(~.x$lData$dfBounds %>% mutate(MetricID = .y)) %>%
            mutate(StudyID = "ABC-123") %>%
            mutate(SnapshotDate = Sys.Date())

          dfSummary <- lResults %>%
            imap_dfr(~.x$lData$dfSummary %>% mutate(MetricID = .y)) %>%
            mutate(StudyID = "ABC-123") %>%
            mutate(SnapshotDate = Sys.Date())

          # Create charts
          lCharts <- unique(dfSummary$MetricID) %>% map(~Visualize_Metric(
              dfSummary = dfSummary,
              dfBounds = dfBounds,
              dfSite = dfSite,
              dfMetrics = dfMetrics,
              strMetricID = .x
            )
          ) %>% setNames(unique(dfSummary$MetricID))

          # Run reports
          strOutpath <- "StandardSiteReport.html"
          Report_KRI( lCharts = lCharts, dfSummary = dfSummary,  dfSite = dfSite, dfStudy = dfStudy, dfMetrics =dfMetrics, strOutpath = strOutpath )

          wf_metrics_c <- MakeWorkflowList(strNames=paste0("cou",sprintf("%04d", 1:12)))
          dfMetrics_c <- wf_metrics_c %>% map_df(~.x$meta)
          # Run Metrics
          lResults <-wf_metrics_c %>% map(~RunWorkflow(lWorkflow=.x, lData=lMapped))

          dfBounds_c <- lResults_c %>%
            imap_dfr(~.x$lData$dfBounds %>% mutate(MetricID = .y)) %>%
            mutate(StudyID = "ABC-123") %>%
            mutate(SnapshotDate = Sys.Date())

          dfSummary_c <- lResults_c %>%
            imap_dfr(~.x$lData$dfSummary %>% mutate(MetricID = .y)) %>%
            mutate(StudyID = "ABC-123") %>%
            mutate(SnapshotDate = Sys.Date())

          # Create charts
          lCharts_c <- unique(dfSummary_c$MetricID) %>% map(~Visualize_Metric(
              dfSummary = dfSummary_c,
              dfBounds = dfBounds_c,
              dfSite = dfSite,
              dfMetrics = dfMetrics_c,
              strMetricID = .x
            )
          ) %>% setNames(unique(dfSummary$MetricID))

          # Run reports
          strOutpath_c <- "StandardCountryReport.html"
          Report_KRI( lCharts = lCharts_c, dfSummary = dfSummary_c,  dfSite = dfSite, dfStudy = dfStudy, dfMetrics =dfMetrics_c, strOutpath = strOutpath_c )


      - name: delete temp-report branch if it exists
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git push origin --delete temp-report || true

      - name: create temp-report branch and set remote
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git checkout -b temp-report
          git add StandardReportCountry.html
          git add StandardReportSite.html
          git commit -m "add reports"
          git remote set-branches --add origin temp-report
          git push -u origin temp-report

      - name: Deploy package
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          Rscript -e 'pkgdown::deploy_to_branch(new_process = FALSE)'

      - name: Checkout temp-report branch
        uses: actions/checkout@v2
        with:
          ref: temp-report

      - name: Checkout gh-pages branch
        uses: actions/checkout@v2
        with:
          ref: gh-pages

      - name: checkout gh-pages branch and commit sample reports; delete upstream temp-report branch
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git fetch
          git checkout origin/temp-report -- StandardReportCountry.html
          git checkout origin/temp-report -- StandardReportSite.html
          git checkout gh-pages
          git add StandardReportCountry.html
          git add StandardReportSite.html
          git commit -m "Add HTML"
          git push origin gh-pages
          git push origin --delete temp-report
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
