% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/util-is_mapping_valid.R
\name{is_mapping_valid}
\alias{is_mapping_valid}
\title{Check that a data frame contains columns and fields specified in mapping.}
\usage{
is_mapping_valid(df, mapping, spec, bQuiet = TRUE)
}
\arguments{
\item{df}{\code{data.frame} A data.frame to compare to mapping object.}

\item{mapping}{\code{list} A named list specifying expected columns and values in df. Parameters ending in \code{col} are assumed to be column names in \code{df}, while parameters ending in \code{val} are values expected in for a corresponding column. For example, \code{mapping=list(strSiteCol="SiteID", strSiteVal=c("001","002"))} would indicate that \code{df} has a \code{df$SiteID} includes values \code{"001"} and \code{"002"}.}

\item{spec}{\code{list} A named list specifying parameters that should be defined in \code{mapping}, and describes how the values specified by those parameters should be used in \code{df}. Should have the following properties:
\itemize{
\item \code{spec$vRequired} - list of parameters that should be defined in \code{mapping}.
\item \code{spec$vUniqueCols} - list of column parameters that should not contain duplicate values
\item \code{spec$vNACols} - list of column parameters where NA and empty string values are acceptable.
}}

\item{bQuiet}{\code{logical} Suppress warning messages? Default: \code{TRUE}}
}
\value{
\code{list} A list is returned with \code{status} (\code{TRUE} or \code{FALSE}), and \code{tests_if},
a list containing checks and a \code{status} and \code{warning} (if check does not pass).
}
\description{
\code{is_mapping_valid} is a utility function that is a core feature of any assessment or workflow. This function evaluates the validity of input data based on
a pre-defined, or user-defined mapping and specification.
}
\examples{
subj_mapping <- list(
  strIDCol = "SubjectID",
  strSiteCol = "SiteID",
  strExposureCol = "TimeOnTreatment"
)

is_mapping_valid(
  df = clindata::rawplus_dm,
  mapping = subj_mapping,
  spec = list(
    vRequired = c("strIDCol", "strSiteCol", "strExposureCol"),
    vUniqueCols = "SUBJID"
  )
)

is_mapping_valid(
  df = clindata::rawplus_dm,
  mapping = subj_mapping,
  spec = list(
    vUniqueCols = "SUBJID",
    vRequiredParams = c("strIDCol", "strSiteCol", "strExposureCol", "strOtherCol")
  )
)

}
