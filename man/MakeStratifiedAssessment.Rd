% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/util-MakeStratifiedAssessment.R
\name{MakeStratifiedAssessment}
\alias{MakeStratifiedAssessment}
\title{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}}
\usage{
MakeStratifiedAssessment(lWorkflow, lData, lMapping, bQuiet = TRUE)
}
\arguments{
\item{lWorkflow}{\code{list} A named list of metadata defining how an workflow should be run.}

\item{lData}{\code{list} A named list of domain-level data frames.}

\item{lMapping}{\code{list} A named list identifying the columns needed in each data domain.}

\item{bQuiet}{\code{logical} Suppress warning messages? Default: \code{TRUE}}
}
\value{
\code{list} A list of workflows for each specified strata
}
\description{
\code{MakeStratifiedAssessment} is a utility function that creates a stratified workflow list using a pre-defined workflow (from \code{inst/workflows}), or
by using a custom named list. For example, a user can run the Adverse Event assessment workflow and stratify by event severity (i.e., \code{aetoxgr}).
This will give a list of compiled workflows, each of which represents the assessment results for each unique value of the stratifying variable.
For this example using default data, \code{MakeWorkflowList} will create four lists under the main output object
\itemize{
\item one with assessment results for mild AEs, one for moderate, one for severe, and one for life-threatening events.
}
}
\details{
Create multiple workflows from a single stratified workflow.
}
\examples{
\dontrun{
lMapping <- yaml::read_yaml(
  system.file("mappings", "mapping_rawplus.yaml", package = "gsm")
)
lWorkflowList <- MakeWorkflowList(strNames = "aeGrade", bRecursive = TRUE)

# Adverse events by grade
StratifiedAE <- MakeStratifiedAssessment(
  lData = list(
    dfSUBJ = clindata::rawplus_dm,
    dfAE = clindata::rawplus_ae
  ),
  lMapping = lMapping,
  lWorkflow = lWorkflowList$aeGrade
)

StratifiedAEResult <- StratifiedAE \%>\%
  purrr::map(~ .x \%>\%
    RunWorkflow(
      lData = list(
        dfSUBJ = clindata::rawplus_dm,
        dfAE = clindata::rawplus_ae
      ),
      lMapping = lMapping
    ))

# Protocol deviations by PD category
StratifiedPD <- MakeStratifiedAssessment(
  lData = list(
    dfSUBJ = clindata::rawplus_dm,
    dfPD = clindata::ctms_protdev
  ),
  lMapping = lMapping,
  lWorkflow = MakeWorkflowList()$pdCategory
)

StratifiedPDResult <- StratifiedPD \%>\%
  purrr::map(~ .x \%>\%
    RunWorkflow(
      lData = list(
        dfSUBJ = clindata::rawplus_dm,
        dfPD = clindata::ctms_protdev
      ),
      lMapping = lMapping
    ))

# Labs by lab category
StratifiedLB <- MakeStratifiedAssessment(
  lData = list(
    dfSUBJ = clindata::rawplus_dm,
    dfLB = clindata::rawplus_lb
  ),
  lMapping = lMapping,
  lWorkflow = lAssessmentList$lbCategory
)

StratifiedLBResult <- StratifiedLB \%>\%
  purrr::map(~ .x \%>\%
    RunWorkflow(
      lData = list(
        dfSUBJ = clindata::rawplus_dm,
        dfLB = clindata::rawplus_lb
      ),
      lMapping = lMapping
    ))
}

}
