% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Flag_Fisher.R
\name{Flag_Fisher}
\alias{Flag_Fisher}
\title{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}}
\usage{
Flag_Fisher(dfAnalyzed, vThreshold = NULL)
}
\arguments{
\item{dfAnalyzed}{data.frame where flags should be added.}

\item{vThreshold}{Vector of 2 numeric values representing lower and upper p-value thresholds.}
}
\value{
\code{data.frame} with one row per site with columns: \code{GroupID}, \code{Numerator}, \code{Denominator}, \code{Metric}, \code{Score}, \code{PredictedCount}, and \code{Flag}.
}
\description{
Add columns flagging sites that represent possible statistical outliers when the Fisher's Exact Test is used.
}
\details{
Flag_Fisher

This function flags sites based on the Fisher's Exact Test result as part of the \href{https://gilead-biostats.github.io/gsm/articles/DataPipeline.html}{GSM data pipeline}.
}
\section{Data Specification}{

\code{Flag_Fisher} is designed to support the input data (\code{dfAnalyzed}) generated from the \code{Analyze_Fisher} function. At a minimum, the input must define a \code{dfAnalyzed} data frame with \code{Score}, \code{Prop}, and \code{Prop_Other} variables included and a \code{vThreshold}. These inputs will be used to identify possible statistical outliers in a new \code{Flag} column by comparing \code{Score}, \code{Prop}, and \code{Prop_Other} values to the specified thresholds.

The following columns are considered required:
\itemize{
\item \code{GroupID} - Group ID; default is \code{SiteID}
\item \code{Score} - P-value calculated from the rates of exposure provided to \code{Analyze_Fisher()}
\item \code{Prop} - Proportion of events of interest over days of exposure
\item \code{Prop_Other} - Cumulative proportion of events of interest over days of exposure
}
}

\examples{
dfInput <- LB_Map_Raw()

dfTransformed <- Transform_Rate(dfInput,
  strGroupCol = "SiteID",
  strNumeratorCol = "Count",
  strDenominatorCol = "Total"
)

dfAnalyzed <- Analyze_Poisson(dfTransformed)

dfFlagged <- Flag(dfAnalyzed, vThreshold = c(-5, 5))

}
