% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Flag_NormalApprox.R
\name{Flag_NormalApprox}
\alias{Flag_NormalApprox}
\title{Flag_NormalApprox}
\usage{
Flag_NormalApprox(dfAnalyzed, vThreshold = NULL)
}
\arguments{
\item{dfAnalyzed}{\code{data.frame} where flags should be added.}

\item{vThreshold}{\code{vector} of 4 numeric values representing lower and upper threshold values. All
values in \code{strColumn} are compared to \code{vThreshold} using strict comparisons. Values less than the lower threshold or greater than the upper threshold are flagged as -1 and 1 respectively. Values equal to the threshold values are set to 0 (i.e. not flagged). If NA is provided for either threshold value it is ignored, and no values are flagged based on the threshold. NA and NaN values in \code{strColumn} are given NA flag values.}
}
\value{
\code{data.frame} with "Flag" column added
}
\description{
Add columns flagging sites that represent possible statistical outliers.
}
\details{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

This function flags sites based on the funnel plot with normal approximation analysis result as part of
the \href{https://gilead-biostats.github.io/gsm/articles/DataPipeline.html}{GSM data pipeline}.
}
\section{Data Specification}{

\code{Flag_NormalApprox} is designed to support the input data (\code{dfAnalyzed}) from \code{Analyze_NormalApprox} function.
At a minimum, the input data must have a \code{SiteID} column and a column of numeric values (identified
by the \code{strColumn} parameter) that will be compared to the specified thresholds (\code{vThreshold}) to
calculate a new \code{Flag} column.
In short, the following columns are considered:
\itemize{
\item \code{GroupID} - Group ID (required)
\item \code{strColumn} - A column to use for Thresholding (required)
\item \code{strValueColumn} - A column to be used for the sign of the flag (optional)
}
}

\examples{
# Binary
dfTransformed <- tibble::tribble(
  ~GroupID,  ~Numerator,  ~Denominator,  ~Metric,
  139, 5, 901, 0.00555,
  143, 3, 170, 0.0176,
  162, 3, 370, 0.00811,
  167, 3, 360, 0.00833,
  173, 6, 680, 0.00882,
  189, 4, 815, 0.00491,
  29,  2, 450, 0.00444,
  5, 5, 730, 0.00685,
  58, 1, 225, 0.00444,
  78, 2, 50, 0.04
)
dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = "binary")
dfFlagged <- Flag_NormalApprox(dfAnalyzed, vThreshold = c(-3, -2, 2, 3))

# Rate
dfInput <- tibble::tribble(
  ~SubjectID, ~SiteID, ~StudyID, ~CountryID, ~CustomGroupID, ~Exposure, ~Count, ~Rate,
  "0496", "5", "AA-AA-000-0000", "US", "0X167", 730, 5, 5/720,
  "1350", "78", "AA-AA-000-0000", "US", "0X002", 50, 2, 2/50,
  "0539", "139", "AA-AA-000-0000", "US", "0X052", 901, 5, 5/901,
  "0329", "162", "AA-AA-000-0000", "US", "0X049", 370, 3, 3/370,
  "0429", "29", "AA-AA-000-0000", "Japan", "0X116", 450, 2, 2/450,
  "1218", "143", "AA-AA-000-0000", "US", "0X153", 170, 3, 3/170,
  "0808", "173", "AA-AA-000-0000", "US", "0X124", 680, 6, 6/680,
  "1314", "189", "AA-AA-000-0000", "US", "0X093", 815, 4, 4/815,
  "1236", "58", "AA-AA-000-0000", "China", "0X091", 225, 1, 1/225,
  "0163", "167", "AA-AA-000-0000", "US", "0X059", 360, 3, 3/360
)
dfTransformed <- Transform_Rate(
  dfInput,
  strGroupCol = "SiteID",
  strNumeratorCol = "Count",
  strDenominatorCol = "Exposure"
)

dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = "rate")
dfFlagged <- Flag_NormalApprox(dfAnalyzed, vThreshold = c(-3, -2, 2, 3))

}
