% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Flag_NormalApprox.R
\name{Flag_NormalApprox}
\alias{Flag_NormalApprox}
\title{Flag_NormalApprox}
\usage{
Flag_NormalApprox(dfAnalyzed, vThreshold = NULL)
}
\arguments{
\item{dfAnalyzed}{\code{data.frame} where flags should be added.}

\item{vThreshold}{\code{vector} of 4 numeric values representing lower and upper threshold values. All
values in \code{strColumn} are compared to \code{vThreshold} using strict comparisons. Values less than the lower threshold or greater than the upper threshold are flagged as -1 and 1 respectively. Values equal to the threshold values are set to 0 (i.e. not flagged). If NA is provided for either threshold value it is ignored, and no values are flagged based on the threshold. NA and NaN values in \code{strColumn} are given NA flag values.}
}
\value{
\code{data.frame} with "Flag" column added
}
\description{
Add columns flagging sites that represent possible statistical outliers.
}
\details{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

This function flags sites based on the funnel plot with normal approximation analysis result as part of
the \href{https://gilead-biostats.github.io/gsm/articles/DataPipeline.html}{GSM data pipeline}.
}
\section{Data Specification}{

\code{Flag_NormalApprox} is designed to support the input data (\code{dfAnalyzed}) from \code{Analyze_NormalApprox} function.
At a minimum, the input data must have a \code{GroupID} column and a column of numeric values (identified
by the \code{strColumn} parameter) that will be compared to the specified thresholds (\code{vThreshold}) to
calculate a new \code{Flag} column.
In short, the following columns are considered:
\itemize{
\item \code{GroupID} - Group ID (required)
\item \code{GroupLevel} - Group Type
\item \code{strColumn} - A column to use for Thresholding (required)
\item \code{strValueColumn} - A column to be used for the sign of the flag (optional)
}
}

\examples{
dfTransformed <- Transform_Rate(analyticsInput)

# Binary
dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = "binary")
dfFlagged <- Flag_NormalApprox(dfAnalyzed, vThreshold = c(-3, -2, 2, 3))

# Rate
dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = "rate")
dfFlagged <- Flag_NormalApprox(dfAnalyzed, vThreshold = c(-3, -2, 2, 3))

}
