% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Flag_NormalApprox.R
\name{Flag_NormalApprox}
\alias{Flag_NormalApprox}
\title{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}}
\usage{
Flag_NormalApprox(dfAnalyzed, vThreshold = NULL)
}
\arguments{
\item{dfAnalyzed}{data.frame where flags should be added.}

\item{vThreshold}{Vector of 4 numeric values representing lower and upper threshold values. All
values in strColumn are compared to vThreshold using strict comparisons. Values less than the lower threshold or greater than the upper threshold are flagged as -1 and 1 respectively. Values equal to the threshold values are set to 0 (i.e. not flagged). If NA is provided for either threshold value it is ignored, and no values are flagged based on the threshold. NA and NaN values in strColumn are given NA flag values.}
}
\value{
\code{data.frame} with "Flag" column added
}
\description{
Flag_NormalApprox
}
\details{
Add columns flagging sites that represent possible statistical outliers.

This function flags sites based on the funnel plot with normal approximation analysis result as part of
the \href{https://silver-potato-cfe8c2fb.pages.github.io/articles/DataPipeline.html}{GSM data pipeline}.
}
\section{Data Specification}{

\code{Flag_NormalApprox} is designed to support the input data (\code{dfAnalyzed}) from \code{Analyze_NormalApprox} function.
At a minimum, the input data must have a \code{SiteID} column and a column of numeric values (identified
by the \code{strColumn} parameter) that will be compared to the specified thresholds (\code{vThreshold}) to
calculate a new \code{Flag} column.
In short, the following columns are considered:
\itemize{
\item \code{GroupID} - Group ID (required)
\item \code{strColumn} - A column to use for Thresholding (required)
\item 'strValueColumn' - A column to be used for the sign of the flag (optional)#'
}
}

\examples{
# Binary
dfInput <- Disp_Map_Raw()
dfTransformed <- Transform_Rate(
  dfInput,
  strGroupCol = "SiteID",
  strNumeratorCol = "Count",
  strDenominatorCol = "Total"
)
dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = "binary")
dfFlagged <- Flag_NormalApprox(dfAnalyzed, vThreshold = c(-3, -2, 2, 3))

# Rate
dfInput <- AE_Map_Raw() \%>\% na.omit()
dfTransformed <- Transform_Rate(
  dfInput,
  strGroupCol = "SiteID",
  strNumeratorCol = "Count",
  strDenominatorCol = "Exposure"
)

dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = "rate")
dfFlagged <- Flag_NormalApprox(dfAnalyzed, vThreshold = c(-3, -2, 2, 3))

}
