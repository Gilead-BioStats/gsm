% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RunWorkflow.R
\name{RunWorkflow}
\alias{RunWorkflow}
\title{Run a workflow via it's YAML specification.}
\usage{
RunWorkflow(
  lWorkflow,
  lData = NULL,
  lConfig = NULL,
  bReturnResult = TRUE,
  bKeepInputData = TRUE
)
}
\arguments{
\item{lWorkflow}{\code{list} A named list of metadata defining how the workflow should be run.}

\item{lData}{\code{list} A named list of domain-level data frames.}

\item{lConfig}{\code{list} A configuration object with two methods:
\itemize{
\item \code{LoadData}: A function that loads data specified in \code{lWorkflow$spec}.
\item \code{SaveData}: A function that saves data returned by the last step in \code{lWorkflow$steps}.
}}

\item{bReturnResult}{\code{boolean} should \emph{only} the result from the last step (\code{lResults}) be returned? If false, the full workflow (including \code{lResults}) is returned. Default is \code{TRUE}.}

\item{bKeepInputData}{\code{boolean} should the input data be included in \code{lData} after the workflow is run? Only relevant when bReturnResult is FALSE. Default is \code{TRUE}.}
}
\value{
Object containing the results of the workflow's last step (if \code{bLastResult} is \code{TRUE}) or the full workflow object (if \code{bReturnResults} is \code{TRUE}) or the full workflow object (if \code{bReturnResults} is \code{FALSE}).

\code{list} contains just lData if \code{bReturnData} is \code{TRUE}, otherwise returns the full \code{lWorkflow} object.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

Attempts to run a single assessment (\code{lWorkflow}) using shared data (\code{lData}) and metadata (\code{lMapping}).
Calls \code{RunStep} for each item in \code{lWorkflow$workflow} and saves the results to \code{lWorkflow}.
}
\examples{
\dontrun{
# ----
# Workflow using in-memory data.

lRawData <- list(
  Raw_AE = clindata::rawplus_ae,
  Raw_SUBJ = clindata::rawplus_dm
)

# Generate mapped input data to metric workflow.
lMappingWorkflows <- MakeWorkflowList(
    c('AE', 'SUBJ'),
    bExact = TRUE
)

lMappedData <- RunWorkflows(
    lMappingWorkflows,
    lRawData
)

# Run the metric workflow.
lMetricWorkflow <- MakeWorkflowList("kri0001")$kri0001
lMetricOutput <- RunWorkflow(
    lMetricWorkflow,
    lMappedData
)

# ----
# Workflow using data read/write functions.

# Define a function that loads data.
LoadData <- function(lWorkflow, lConfig, lData) {
lData <- lData
    purrr::imap(
        lWorkflow$spec,
        ~ {
            input <- lConfig$Domains[[ .y ]]

            if (is.function(input)) {
                data <- input()
            } else if (is.character(input)) {
                data <- read.csv(input)
            }

            lData[[.y]] <- ApplySpec(data, .x)
        }
    )
    return(lData)
}

# Define a function that saves data to .csv.
SaveData <- function(lWorkflow, lConfig) {
    domain <- paste0(lWorkflow$meta$Type, '_', lWorkflow$meta$ID)
    if (domain \%in\% names(lConfig$Domains)) {
        output <- lConfig$Domains[[ domain ]]

        write.csv(
            lWorkflow$lResult,
            output
        )
    }
}

# Define a configuration object with LoadData/SaveData functions and a list of named data sources.
lConfig <- list(
    LoadData = LoadData,
    SaveData = SaveData,
    Domains = c(
        Raw_AE = function() { clindata::rawplus_ae },
        Raw_SUBJ = function() { clindata::rawplus_dm },

        Mapped_AE = file.path(tempdir(), 'mapped-ae.csv'),
        Mapped_SUBJ = file.path(tempdir(), 'mapped-subj.csv')
    )
)

# Generate mapped input data to metric workflow.
lMappingWorkflows <- MakeWorkflowList(
    c('AE', 'SUBJ'),
    bExact = TRUE
)

lMappedData <- RunWorkflows(
    lMappingWorkflows,
    lConfig = lConfig
)

# Run the metric workflow.
lMetricWorkflow <- MakeWorkflowList("kri0001")$kri0001
lMetricOutput <- RunWorkflow(
    lMetricWorkflow,
    lConfig = lConfig
)
}
}
