% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AE_Map_Raw.R
\name{AE_Map_Raw}
\alias{AE_Map_Raw}
\title{Adverse Event Assessment - Raw Mapping}
\usage{
AE_Map_Raw(
  dfs = list(dfAE = clindata::rawplus_ae, dfSUBJ = clindata::rawplus_subj),
  lMapping = clindata::mapping_rawplus,
  bReturnChecks = FALSE,
  bQuiet = TRUE
)
}
\arguments{
\item{dfs}{\code{list} Input data frames:
\itemize{
\item \code{dfAE}: \code{data.frame} Event-level data with one record per AE.
\item \code{dfSUBJ}: \code{data.frame} Subject-level data with one record per subject.
}}

\item{lMapping}{\code{list} Column metadata with structure \code{domain$key}, where \code{key} contains the name of the column.}

\item{bReturnChecks}{\code{logical} Return input checks from {gsm::is_mapping_valid()}? Default: \code{FALSE}}

\item{bQuiet}{\code{logical} Suppress warning messages? Default: \code{TRUE}}
}
\value{
\code{data.frame} Data frame with one record per subject, the input to {gsm::AE_Assess()}. If
\code{bReturnChecks} is \code{TRUE} \code{AE_Map_Raw} returns a named \code{list} with:
\itemize{
\item \code{df}: the data frame described above
\item \code{lChecks}: a named \code{list} of check results
}
}
\description{
Convert raw adverse event (AE) data, typically processed case report form data, to formatted
input data to {gsm::AE_Assess()}.
}
\details{
\code{AE_Map_Raw} combines AE data with subject-level treatment exposure data to create formatted
input data to {gsm::AE_Assess()}. This function creates an input dataset for the AE Assessment
({gsm::AE_Assess()}) by binding subject-level AE counts (derived from \code{dfAE}) to subject-level
data (from \code{dfSUBJ}). Note that the function can generate data summaries for specific types of
AEs by passing filtered AE data to \code{dfAE}.
}
\section{Data specification}{
\if{html}{\out{
<table>
<thead>
<tr>
<th style="text-align:left;">
domain
</th>
<th style="text-align:left;">
col_key
</th>
<th style="text-align:left;">
col_value
</th>
<th style="text-align:left;">
vRequired
</th>
<th style="text-align:left;">
vUniqueCols
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">
dfSUBJ
</td>
<td style="text-align:left;">
strIDCol
</td>
<td style="text-align:left;">
SubjectID
</td>
<td style="text-align:left;">
TRUE
</td>
<td style="text-align:left;">
TRUE
</td>
</tr>
<tr>
<td style="text-align:left;">
dfSUBJ
</td>
<td style="text-align:left;">
strSiteCol
</td>
<td style="text-align:left;">
SiteID
</td>
<td style="text-align:left;">
TRUE
</td>
<td style="text-align:left;">
FALSE
</td>
</tr>
<tr>
<td style="text-align:left;">
dfSUBJ
</td>
<td style="text-align:left;">
strTimeOnTreatmentCol
</td>
<td style="text-align:left;">
TimeOnTreatment
</td>
<td style="text-align:left;">
TRUE
</td>
<td style="text-align:left;">
FALSE
</td>
</tr>
<tr>
<td style="text-align:left;">
dfAE
</td>
<td style="text-align:left;">
strIDCol
</td>
<td style="text-align:left;">
SubjectID
</td>
<td style="text-align:left;">
TRUE
</td>
<td style="text-align:left;">
NA
</td>
</tr>
</tbody>
</table>
}}
}

\examples{
dfInput <- AE_Map_Raw() # Run with defaults
dfInput <- AE_Map_Raw(bReturnChecks = TRUE, bQuiet = FALSE) # Run with error checking and message log

}
