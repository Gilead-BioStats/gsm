% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Consent_Map_Raw.R
\name{Consent_Map_Raw}
\alias{Consent_Map_Raw}
\title{Consent Assessment - Raw Mapping}
\usage{
Consent_Map_Raw(
  dfs = list(dfCONSENT = clindata::rawplus_consent, dfSUBJ = clindata::rawplus_subj),
  lMapping = yaml::read_yaml(system.file("mappings", "mapping_rawplus.yaml", package =
    "gsm")),
  bReturnChecks = FALSE,
  bQuiet = TRUE
)
}
\arguments{
\item{dfs}{\code{list} Input data frames:
\itemize{
\item \code{dfCONSENT}: \code{data.frame} Consent type-level data with one record per subject per consent type.
\item \code{dfSUBJ}: \code{data.frame} Subject-level data with one record per subject.
}}

\item{lMapping}{\code{list} Column metadata with structure \code{domain$key}, where \code{key} contains the name
of the column.}

\item{bReturnChecks}{\code{logical} Return input checks from \code{\link[=is_mapping_valid]{is_mapping_valid()}}? Default: \code{FALSE}}

\item{bQuiet}{\code{logical} Suppress warning messages? Default: \code{TRUE}}
}
\value{
\code{data.frame} Data frame with one record per subject, the input to \code{\link[=Consent_Assess]{Consent_Assess()}}.
If \code{bReturnChecks} is \code{TRUE} \code{Consent_Map_Raw} returns a named \code{list} with:
\itemize{
\item \code{df}: the data frame described above
\item \code{lChecks}: a named \code{list} of check results
}
}
\description{
Convert raw informed consent data, typically processed case report from data, to formatted
input data to \code{\link[=Consent_Assess]{Consent_Assess()}}.
}
\details{
\code{Consent_Map_Raw} combines consent data with subject-level data to create formatted input data
to \code{\link[=Consent_Assess]{Consent_Assess()}}. This function creates an input dataset for the Consent Assessment
(${Consent_Assess()} by binding subject-level counts of consent issues (derived from \code{dfCONSENT}) to
subject-level data (from \code{dfSUBJ}). Note the function can generate data summaries for specific
types of consent by customizing \code{lMapping$dfCONSENT}.
}
\section{Data specification}{
\if{html}{\out{
<table>
<colgroup>
<col width="10%" />
<col width="13%" />
<col width="15%" />
<col width="12%" />
<col width="24%" />
<col width="23%" />
</colgroup>
<thead>
<tr class="header">
<th align="left"><strong>Domain</strong></th>
<th align="left"><strong>Column Key</strong></th>
<th align="left"><strong>Default Value</strong></th>
<th align="left"><strong>Required?</strong></th>
<th align="left"><strong>Accept NA/Empty Values?</strong></th>
<th align="left"><strong>Require Unique Values?</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">dfSUBJ</td>
<td align="left">strIDCol</td>
<td align="left">SubjectID</td>
<td align="left">TRUE</td>
<td align="left">FALSE</td>
<td align="left">TRUE</td>
</tr>
<tr class="even">
<td align="left">dfSUBJ</td>
<td align="left">strSiteCol</td>
<td align="left">SiteID</td>
<td align="left">TRUE</td>
<td align="left">FALSE</td>
<td align="left">FALSE</td>
</tr>
<tr class="odd">
<td align="left">dfSUBJ</td>
<td align="left">strRandDateCol</td>
<td align="left">RandDate</td>
<td align="left">TRUE</td>
<td align="left">FALSE</td>
<td align="left">FALSE</td>
</tr>
<tr class="even">
<td align="left">dfCONSENT</td>
<td align="left">strIDCol</td>
<td align="left">SubjectID</td>
<td align="left">TRUE</td>
<td align="left">FALSE</td>
<td align="left">FALSE</td>
</tr>
<tr class="odd">
<td align="left">dfCONSENT</td>
<td align="left">strTypeCol</td>
<td align="left">CONSENT_TYPE</td>
<td align="left">TRUE</td>
<td align="left">FALSE</td>
<td align="left">FALSE</td>
</tr>
<tr class="even">
<td align="left">dfCONSENT</td>
<td align="left">strValueCol</td>
<td align="left">CONSENT_VALUE</td>
<td align="left">TRUE</td>
<td align="left">FALSE</td>
<td align="left">FALSE</td>
</tr>
<tr class="odd">
<td align="left">dfCONSENT</td>
<td align="left">strDateCol</td>
<td align="left">CONSENT_DATE</td>
<td align="left">TRUE</td>
<td align="left">TRUE</td>
<td align="left">FALSE</td>
</tr>
</tbody>
</table>
}}
}

\examples{
# Run with defaults.
dfInput <- Consent_Map_Raw()

# Run with error checking and message log.
dfInput <- Consent_Map_Raw(bReturnChecks = TRUE, bQuiet = FALSE)

}
