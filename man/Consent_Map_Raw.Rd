% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Consent_Map_Raw.R
\name{Consent_Map_Raw}
\alias{Consent_Map_Raw}
\title{Consent Assessment - Raw Mapping}
\usage{
Consent_Map_Raw(
  dfs = list(dfSUBJ = clindata::rawplus_dm, dfCONSENT = clindata::rawplus_consent),
  lMapping = yaml::read_yaml(system.file("mappings", "mapping_rawplus.yaml", package =
    "gsm")),
  bReturnChecks = FALSE,
  bQuiet = TRUE
)
}
\arguments{
\item{dfs}{\code{list} Input data frames:
\itemize{
\item \code{dfCONSENT}: \code{data.frame} Consent type-level data with one record per subject per consent type.
\item \code{dfSUBJ}: \code{data.frame} Subject-level data with one record per subject.
}}

\item{lMapping}{\code{list} Column metadata with structure \code{domain$key}, where \code{key} contains the name
of the column.}

\item{bReturnChecks}{\code{logical} Return input checks from \code{\link[=is_mapping_valid]{is_mapping_valid()}}? Default: \code{FALSE}}

\item{bQuiet}{\code{logical} Suppress warning messages? Default: \code{TRUE}}
}
\value{
\code{data.frame} Data frame with one record per subject, the input to \code{\link[=Consent_Assess]{Consent_Assess()}}.
If \code{bReturnChecks} is \code{TRUE} \code{Consent_Map_Raw} returns a named \code{list} with:
\itemize{
\item \code{df}: the data frame described above
\item \code{lChecks}: a named \code{list} of check results
}
}
\description{
Convert raw informed consent data, typically processed case report from data, to formatted
input data to \code{\link[=Consent_Assess]{Consent_Assess()}}.
}
\details{
\code{Consent_Map_Raw} combines consent data with subject-level data to create formatted input data
to \code{\link[=Consent_Assess]{Consent_Assess()}}. This function creates an input dataset for the Consent Assessment
(${Consent_Assess()} by binding subject-level counts of consent issues (derived from \code{dfCONSENT}) to
subject-level data (from \code{dfSUBJ}). Note the function can generate data summaries for specific
types of consent by customizing \code{lMapping$dfCONSENT}.
}
\section{Data specification}{
\tabular{llllll}{
   \strong{Domain} \tab \strong{Column Key} \tab \strong{Default Value} \tab \strong{Required?} \tab \strong{Accept NA/Empty Values?} \tab \strong{Require Unique Values?} \cr
   dfSUBJ \tab strIDCol \tab SubjectID \tab TRUE \tab FALSE \tab TRUE \cr
   dfSUBJ \tab strSiteCol \tab SiteID \tab TRUE \tab FALSE \tab FALSE \cr
   dfSUBJ \tab strRandDateCol \tab RandDate \tab TRUE \tab FALSE \tab FALSE \cr
   dfCONSENT \tab strIDCol \tab SubjectID \tab TRUE \tab FALSE \tab FALSE \cr
   dfCONSENT \tab strTypeCol \tab CONSENT_TYPE \tab TRUE \tab FALSE \tab FALSE \cr
   dfCONSENT \tab strValueCol \tab CONSENT_VALUE \tab TRUE \tab FALSE \tab FALSE \cr
   dfCONSENT \tab strDateCol \tab CONSENT_DATE \tab TRUE \tab TRUE \tab FALSE \cr
}
}

\examples{
# Run with defaults.
dfInput <- Consent_Map_Raw()

# Run with error checking and message log.
dfInput <- Consent_Map_Raw(bReturnChecks = TRUE, bQuiet = FALSE)

}
