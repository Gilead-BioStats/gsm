% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Analyze_NormalApprox_PredictBounds.R
\name{Analyze_NormalApprox_PredictBounds}
\alias{Analyze_NormalApprox_PredictBounds}
\title{Funnel Plot Analysis with Normal Approximation - Predicted Boundaries.}
\usage{
Analyze_NormalApprox_PredictBounds(
  dfTransformed,
  vThreshold = c(-3, -2, 2, 3),
  strType = "binary",
  nStep = NULL
)
}
\arguments{
\item{dfTransformed}{\code{data.frame} Transformed data for analysis. Data should have one record per site with expected columns: \code{GroupID}, \code{GroupLevel}, \code{Numerator}, \code{Denominator}, and \code{Metric}. For more details see the Data Model vignette: \code{vignette("DataModel", package = "gsm")}.
For this function, \code{dfTransformed} should typically be created using \code{\link[=Transform_Rate]{Transform_Rate()}}.}

\item{vThreshold}{\code{numeric} upper and lower boundaries based on standard deviation. Should be identical to
the thresholds used in \verb{*_Assess()} functions.}

\item{strType}{\code{character} Statistical method. Valid values:
\itemize{
\item \code{"binary"} (default)
\item \code{"rate"}
}}

\item{nStep}{\code{numeric} step size of imputed bounds.}
}
\value{
\code{data.frame} containing predicted boundary values with upper and lower bounds across the
range of observed values.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

Applies a funnel plot analysis with normal approximation to site-level data, and then calculates predicted
percentages/rates and upper- and lower-bounds across the full range of sample sizes/total exposure values.
}
\section{Statistical Methods}{

This function applies a funnel plot analysis with normal approximation to site-level data and then calculates
predicted percentages/rates and upper- and lower- bounds (funnels) based on the standard deviation from the mean
across the full range of sample sizes/total exposure values.
}

\examples{
# Binary
dfTransformed <- Transform_Rate(analyticsInput)

dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = "binary")
dfBounds <- Analyze_NormalApprox_PredictBounds(dfTransformed, c(-3, -2, 2, 3), strType = "binary")

# Rate
dfAnalyzed <- Analyze_NormalApprox(dfTransformed, strType = "rate")
dfBounds <- Analyze_NormalApprox_PredictBounds(dfTransformed, c(-3, -2, 2, 3), strType = "rate")

}
