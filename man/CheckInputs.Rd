% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/util-CheckInputs.R
\name{CheckInputs}
\alias{CheckInputs}
\title{Check mapping inputs.}
\usage{
CheckInputs(context, dfs, mapping = NULL, spec = NULL, bQuiet = TRUE)
}
\arguments{
\item{context}{\code{character} Name of the data pipeline "step" that is being checked, e.g.
"AE_Map_Raw" or "PD_Assess_Rate".}

\item{dfs}{\code{list} A list of data frames.}

\item{mapping}{\code{list} YAML mapping for a given context.}

\item{spec}{\code{list} YAML spec for a given context.}

\item{bQuiet}{\code{logical} Suppress warning messages? Default: \code{TRUE}}
}
\value{
\code{list} Checks, a named list with:
\itemize{
\item a \code{list} containing each data.frame that was checked
\itemize{
\item status \code{logical} - did the data.frame pass the checks?
\item tests_if \code{list} - a named list containing status and warnings for all checks
}
\item status \code{logical} - did all checked data pass the checks?
}
}
\description{
\code{CheckInputs()} uses a mapping and specification to recursively run the \code{{gsm}} function \code{is_mapping_valid()} on data domains for a given assessment.
The purpose of \code{CheckInputs()} is to identify any issues where the input data does not match the pre-defined mapping and/or specification for the expected input data format.
}
\examples{
checks <- CheckInputs(
  context = "AE_Assess",
  dfs = list(dfInput = AE_Map_Raw()),
  bQuiet = TRUE
)

}
