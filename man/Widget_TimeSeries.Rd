% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Widget_TimeSeries.R
\name{Widget_TimeSeries}
\alias{Widget_TimeSeries}
\title{Time Series Widget}
\usage{
Widget_TimeSeries(
  dfSummary,
  lMetric,
  dfGroups = NULL,
  vThreshold = NULL,
  strOutcome = "Score",
  bAddGroupSelect = TRUE,
  bDebug = FALSE
)
}
\arguments{
\item{dfSummary}{\code{data.frame} Output of \code{\link[=Summarize]{Summarize()}}. Must contain a 'SnapshotDate' column.}

\item{lMetric}{\code{list} Metric metadata, captured at the top of metric workflows and returned by
\code{\link[=MakeMetricInfo]{MakeMetricInfo()}}.}

\item{dfGroups}{\code{data.frame} Group metadata.}

\item{vThreshold}{\code{numeric} Threshold value(s).}

\item{strOutcome}{\code{character} Outcome variable. Default: 'Score'.}

\item{bAddGroupSelect}{\code{logical} Add a dropdown to highlight sites? Default: \code{TRUE}.}

\item{bDebug}{\code{logical} Print debug messages? Default: \code{FALSE}.}
}
\description{
A widget that generates a time series of group-level metric results over time, plotting snapshot
date on the x-axis and the outcome (numerator, denominator, metric, or score) on the y-axis.
}
\details{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
}
\examples{
\dontrun{
lDataRaw <- list(
    dfSTUDY = clindata::ctms_study,
    dfSITE = clindata::ctms_site,
    dfSUBJ = clindata::rawplus_dm,
    dfAE = clindata::rawplus_ae
)

lMappingWorkflow <- MakeWorkflowList('mapping')$mapping

lMappingWorkflow$steps <- lMappingWorkflow$steps \%>\%
    purrr::keep(~ .x$params$df \%in\% names(lDataRaw))

lDataMapped <- RunWorkflow(
    lMappingWorkflow,
    lDataRaw
)$lData

strMetricID <- 'kri0001'
lMetricWorkflow <- MakeWorkflowList(strMetricID)[[ strMetricID ]]

lResults <- RunWorkflow(
    lMetricWorkflow,
    lDataMapped
)

# Simulate longitudinal snapshot data.
SnapshotDates <- paste0('20', 13:24, '-01-01')

dfSummary <- purrr::map_dfr(
    SnapshotDates,
    ~ {
        order <- sample(1:nrow(lResults$lData$dfSummary))
        dfSummary <- lResults$lData$dfSummary \%>\%
            mutate(
                SnapshotDate = .x,
                Numerator = Numerator[order],
                Denominator = Denominator[order],
                Metric = Metric[order],
                Score = Score[order],
                Flag = Flag[order]
            )
        return(dfSummary)
    }
)

dfGroups <- clindata::ctms_site \%>\%
    left_join(
        lDataMapped$dfEnrolled \%>\%
            group_by(siteid) \%>\%
            tally(name = 'enrolled_participants'),
        c('site_num' = 'siteid')
    ) \%>\%
    rename(
        SiteID = site_num,
        status = site_status
    )

Widget_TimeSeries(
    dfSummary = dfSummary,
    lMetric = lMetricWorkflow$meta,
    dfGroups = dfGroups,
    vThreshold = lMetricWorkflow$meta$vThreshold
)
}
}
