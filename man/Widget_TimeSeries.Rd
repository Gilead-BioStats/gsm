% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Widget_TimeSeries.R
\name{Widget_TimeSeries}
\alias{Widget_TimeSeries}
\title{Time Series Widget}
\usage{
Widget_TimeSeries(
  dfSummary,
  lMetric,
  dfGroups = NULL,
  vThreshold = NULL,
  strOutcome = "Score",
  bAddGroupSelect = TRUE,
  bDebug = FALSE
)
}
\arguments{
\item{lMetric}{\code{list} Metric metadata, captured at the top of metric workflows and returned by
\code{\link[=MakeMetricInfo]{MakeMetricInfo()}}.}

\item{dfGroups}{\code{data.frame} Group metadata.}

\item{vThreshold}{\code{numeric} Threshold value(s).}

\item{strOutcome}{\code{character} Outcome variable. Default: 'Score'.}

\item{bAddGroupSelect}{\code{logical} Add a dropdown to highlight sites? Default: \code{TRUE}.}

\item{bDebug}{\code{logical} Print debug messages? Default: \code{FALSE}.}

\item{dfResults}{\code{data.frame} Output of \code{\link[=Summarize]{Summarize()}} and \code{\link[=BindResults]{BindResults()}}. Must contain a 'SnapshotDate' column.}
}
\description{
A widget that generates a time series of group-level metric results over time, plotting snapshot
date on the x-axis and the outcome (numerator, denominator, metric, or score) on the y-axis.
}
\details{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
}
\examples{
\dontrun{
lWorkflows <- MakeWorkflowList()
strMetricID <- 'kri0001'
lMetricWorkflow <- lWorkflows[[ strMetricID ]]

lData <- list(
    dfEnrolled = clindata::rawplus_dm \%>\% filter(enrollyn == 'Y'),
    dfAE = clindata::rawplus_ae
)

lResults <- RunWorkflow(
    lMetricWorkflow,
    lData
)

# Simulate longitudinal snapshot data.
SnapshotDates <- paste0('20', 13:24, '-01-01')

dfSummary <- purrr::map_dfr(
    SnapshotDates,
    ~ {
        order <- sample(1:nrow(lResults$dfSummary))
        dfSummary <- lResults$dfSummary \%>\%
            mutate(
                SnapshotDate = .x,
                Numerator = Numerator[order],
                Denominator = Denominator[order],
                Metric = Metric[order],
                Score = Score[order],
                Flag = Flag[order]
            )

        return(dfSummary)
    }
)

dfGroups <- bind_rows(
    "SELECT site_num as GroupID, site_status as Status, pi_first_name as InvestigatorFirstName, pi_last_name as InvestigatorLastName, city as City, state as State, country as Country, * FROM df" \%>\%
        RunQuery(clindata::ctms_site) \%>\%
        MakeLongMeta('Site'),
    "SELECT siteid as GroupID, COUNT(DISTINCT subjectid) as ParticipantCount, COUNT(DISTINCT siteid) as SiteCount FROM df GROUP BY siteid" \%>\%
        RunQuery(lData$dfEnrolled) \%>\%
        MakeLongMeta('Site')
)

Widget_TimeSeries(
    dfSummary = dfSummary,
    lMetric = lMetricWorkflow$meta,
    dfGroups = dfGroups,
    vThreshold = lMetricWorkflow$meta$vThreshold
)
}
}
