% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Visualize_Scatter.R
\name{Visualize_Scatter}
\alias{Visualize_Scatter}
\title{Group-level visualization of group-level results}
\usage{
Visualize_Scatter(
  dfSummary,
  dfBounds = NULL,
  strGroupCol = NULL,
  strGroupLabel = NULL,
  strUnit = "days",
  vColors = c("#999999", "#FADB14", "#FF4D4F")
)
}
\arguments{
\item{dfSummary}{\code{data.frame} returned by \code{\link[=Summarize]{Summarize()}}}

\item{dfBounds}{\code{data.frame} data.frame giving prediction bounds for range of denominator in dfSummary.}

\item{strGroupCol}{\code{character} name of stratification column for facet wrap Default: \code{NULL}}

\item{strGroupLabel}{\code{character} name of group, used for labeling axes. Default: \code{NULL}}

\item{strUnit}{\code{character} exposure time unit. Default: \code{days}}

\item{vColors}{\code{character} vector of hex colors for plotting boundaries/thresholds. Index 1: mean; index 2: first threshold boundary; index 3: second threshold boundary.}
}
\value{
group-level plot object.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
}
\examples{
\dontrun{
lData <- gsm::UseClindata(
  list(
    "dfSUBJ" = "clindata::rawplus_dm",
    "dfAE" = "clindata::rawplus_ae",
    "dfPD" = "clindata::ctms_protdev",
    "dfCONSENT" = "clindata::rawplus_consent",
    "dfIE" = "clindata::rawplus_ie",
    "dfLB" = "clindata::rawplus_lb",
    "dfSTUDCOMP" = "clindata::rawplus_studcomp",
    "dfSDRGCOMP" = "clindata::rawplus_sdrgcomp \%>\%
          dplyr::filter(.data$phase == 'Blinded Study Drug Completion')",
    "dfDATACHG" = "clindata::edc_data_points",
    "dfDATAENT" = "clindata::edc_data_pages",
    "dfQUERY" = "clindata::edc_queries",
    "dfENROLL" = "clindata::rawplus_enroll"
  )
)
wf_mapping <- MakeWorkflowList("mapping")
ae <- MakeWorkflowList(strNames = "kri0001")
lMapped <- RunWorkflow(wf_mapping, lData)$mapping$lResults
SafetyAE <- RunWorkflow(ae, lMapped)
dfBounds <- Analyze_Poisson_PredictBounds(SafetyAE$kri0001$lResults$dfTransformed, c(-5, 5))
Visualize_Scatter(SafetyAE$kri0001$lResults$dfSummary, dfBounds)
}

}
